
DEAL::Dim: 3
DEAL::Type list: Test function
DEAL::{TestFunction[T]}
DEAL::
DEAL::Type list: Trial solution
DEAL::{TrialSolution[T]}
DEAL::
DEAL::Linear form pattern (Type list): Test function
DEAL::{TestFunction[T]}
DEAL::
DEAL::Bilinear form pattern (Outer product type list: Test function X Trial solution
DEAL::{(TestFunction[T], TrialSolution[T])}
DEAL::
DEAL::Functor arguments (Type list):
DEAL::{Tensor<2, 3, double>}
DEAL::
DEAL::Linear form generator (Type list):
DEAL::<TestFunction[T], Tensor<2, 3, double>({Tensor<2, 3, double>})>
DEAL::
DEAL::Bilinear form generator (Type list):
DEAL::<TestFunction[T], Tensor<4, 3, double>({Tensor<2, 3, double>}), TrialSolution[T]>
DEAL::
DEAL::OK
DEAL::Type list: Test function
DEAL::{TestFunction[T], Grad(TestFunction[T])}
DEAL::
DEAL::Type list: Trial solution
DEAL::{TrialSolution[T], Grad(TrialSolution[T])}
DEAL::
DEAL::Linear form pattern (Type list): Test function
DEAL::{TestFunction[T], Grad(TestFunction[T])}
DEAL::
DEAL::Bilinear form pattern (Outer product type list: Test function X Trial solution
DEAL::{(TestFunction[T], TrialSolution[T]), (TestFunction[T], Grad(TrialSolution[T])), (Grad(TestFunction[T]), TrialSolution[T]), (Grad(TestFunction[T]), Grad(TrialSolution[T]))}
DEAL::
DEAL::Functor arguments (Type list):
DEAL::{Tensor<2, 3, double>, Tensor<3, 3, double>}
DEAL::
DEAL::Linear form generator (Type list):
DEAL::{<TestFunction[T], Tensor<2, 3, double>({Tensor<2, 3, double>, Tensor<3, 3, double>})>, <Grad(TestFunction[T]), Tensor<3, 3, double>({Tensor<2, 3, double>, Tensor<3, 3, double>})>}
DEAL::
DEAL::Bilinear form generator (Type list):
DEAL::{<TestFunction[T], Tensor<4, 3, double>({Tensor<2, 3, double>, Tensor<3, 3, double>}), TrialSolution[T]>, {<TestFunction[T], Tensor<5, 3, double>({Tensor<2, 3, double>, Tensor<3, 3, double>}), Grad(TrialSolution[T])>, {<Grad(TestFunction[T]), Tensor<5, 3, double>({Tensor<2, 3, double>, Tensor<3, 3, double>}), TrialSolution[T]>, <Grad(TestFunction[T]), Tensor<6, 3, double>({Tensor<2, 3, double>, Tensor<3, 3, double>}), Grad(TrialSolution[T])>}}}
DEAL::
DEAL::OK
DEAL::Type list: Test function
DEAL::{TestFunction[T], Grad(TestFunction[T]), Div(TestFunction[T])}
DEAL::
DEAL::Type list: Trial solution
DEAL::{TrialSolution[T], Grad(TrialSolution[T]), Div(TrialSolution[T])}
DEAL::
DEAL::Linear form pattern (Type list): Test function
DEAL::{TestFunction[T], Grad(TestFunction[T]), Div(TestFunction[T])}
DEAL::
DEAL::Bilinear form pattern (Outer product type list: Test function X Trial solution
DEAL::{(TestFunction[T], TrialSolution[T]), (TestFunction[T], Grad(TrialSolution[T])), (TestFunction[T], Div(TrialSolution[T])), (Grad(TestFunction[T]), TrialSolution[T]), (Grad(TestFunction[T]), Grad(TrialSolution[T])), (Grad(TestFunction[T]), Div(TrialSolution[T])), (Div(TestFunction[T]), TrialSolution[T]), (Div(TestFunction[T]), Grad(TrialSolution[T])), (Div(TestFunction[T]), Div(TrialSolution[T]))}
DEAL::
DEAL::Functor arguments (Type list):
DEAL::{Tensor<2, 3, double>, Tensor<3, 3, double>, Tensor<1, 3, double>}
DEAL::
DEAL::Linear form generator (Type list):
DEAL::{<TestFunction[T], Tensor<2, 3, double>({Tensor<2, 3, double>, Tensor<3, 3, double>, Tensor<1, 3, double>})>, {<Grad(TestFunction[T]), Tensor<3, 3, double>({Tensor<2, 3, double>, Tensor<3, 3, double>, Tensor<1, 3, double>})>, <Div(TestFunction[T]), Tensor<1, 3, double>({Tensor<2, 3, double>, Tensor<3, 3, double>, Tensor<1, 3, double>})>}}
DEAL::
DEAL::Bilinear form generator (Type list):
DEAL::{<TestFunction[T], Tensor<4, 3, double>({Tensor<2, 3, double>, Tensor<3, 3, double>, Tensor<1, 3, double>}), TrialSolution[T]>, {<TestFunction[T], Tensor<5, 3, double>({Tensor<2, 3, double>, Tensor<3, 3, double>, Tensor<1, 3, double>}), Grad(TrialSolution[T])>, {<TestFunction[T], Tensor<3, 3, double>({Tensor<2, 3, double>, Tensor<3, 3, double>, Tensor<1, 3, double>}), Div(TrialSolution[T])>, {<Grad(TestFunction[T]), Tensor<5, 3, double>({Tensor<2, 3, double>, Tensor<3, 3, double>, Tensor<1, 3, double>}), TrialSolution[T]>, {<Grad(TestFunction[T]), Tensor<6, 3, double>({Tensor<2, 3, double>, Tensor<3, 3, double>, Tensor<1, 3, double>}), Grad(TrialSolution[T])>, {<Grad(TestFunction[T]), Tensor<4, 3, double>({Tensor<2, 3, double>, Tensor<3, 3, double>, Tensor<1, 3, double>}), Div(TrialSolution[T])>, {<Div(TestFunction[T]), Tensor<3, 3, double>({Tensor<2, 3, double>, Tensor<3, 3, double>, Tensor<1, 3, double>}), TrialSolution[T]>, {<Div(TestFunction[T]), Tensor<4, 3, double>({Tensor<2, 3, double>, Tensor<3, 3, double>, Tensor<1, 3, double>}), Grad(TrialSolution[T])>, <Div(TestFunction[T]), Tensor<2, 3, double>({Tensor<2, 3, double>, Tensor<3, 3, double>, Tensor<1, 3, double>}), Div(TrialSolution[T])>}}}}}}}}
DEAL::
DEAL::OK
DEAL::OK
DEAL::OK
