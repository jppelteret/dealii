
DEAL::Dim: 3
DEAL::Type list: Field solution
DEAL::{FieldSolution[T]}
DEAL::
DEAL::Type list: Functor input arguments
DEAL::{Tensor<2, 3, double>}
DEAL::
DEAL::Outer product type list: Field solution X Field solution
DEAL::{(FieldSolution[T], FieldSolution[T])}
DEAL::
DEAL::OK
DEAL::Type list: Field solution
DEAL::{FieldSolution[T], Grad(FieldSolution[T])}
DEAL::
DEAL::Type list: Functor input arguments
DEAL::{Tensor<2, 3, double>, Tensor<3, 3, double>}
DEAL::
DEAL::Outer product type list: Field solution X Field solution
DEAL::{(FieldSolution[T], FieldSolution[T]), (FieldSolution[T], Grad(FieldSolution[T])), (Grad(FieldSolution[T]), FieldSolution[T]), (Grad(FieldSolution[T]), Grad(FieldSolution[T]))}
DEAL::
DEAL::OK
DEAL::Type list: Field solution
DEAL::{FieldSolution[T], Grad(FieldSolution[T]), Div(FieldSolution[T])}
DEAL::
DEAL::Type list: Functor input arguments
DEAL::{Tensor<2, 3, double>, Tensor<3, 3, double>, Tensor<1, 3, double>}
DEAL::
DEAL::Outer product type list: Field solution X Field solution
DEAL::{(FieldSolution[T], FieldSolution[T]), (FieldSolution[T], Grad(FieldSolution[T])), (FieldSolution[T], Div(FieldSolution[T])), (Grad(FieldSolution[T]), FieldSolution[T]), (Grad(FieldSolution[T]), Grad(FieldSolution[T])), (Grad(FieldSolution[T]), Div(FieldSolution[T])), (Div(FieldSolution[T]), FieldSolution[T]), (Div(FieldSolution[T]), Grad(FieldSolution[T])), (Div(FieldSolution[T]), Div(FieldSolution[T]))}
DEAL::
DEAL::OK
DEAL::OK
DEAL::OK
